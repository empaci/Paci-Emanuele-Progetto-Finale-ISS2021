System -msglog model

Request clientRequest : clientRequest(X) // X = in
Reply enter : enter(SLOTNUM) // SLOTNUM=0/1/2/3/4/5/6 

Request carenter : carenter(SLOTNUM) // SLOTNUM=1/2/3/4/5/6
Reply receipt : receipt(TOKENID)

Dispatch outTokenid : outTokenid(TOKENID)
Dispatch weightData : weightData(W)
Dispatch sonarData : sonarData(D) 

Dispatch move : move(X,Y)
Dispatch moveok   : move( MOVESHORT )

Dispatch cmd       : cmd(MOVE)
Request step       : step( TIME )	
Reply   stepdone   : stepdone(V)
Reply   stepfail   : stepfail(DURATION, CAUSE)

Context ctxparkmanager ip [host="localhost" port=8070]
Context ctxbasicrobot ip [host="127.0.0.1" port=8020]    

ExternalQActor basicrobot context ctxbasicrobot

QActor client context ctxparkmanager {
	[# var TOKENID = ""
	 var SLOTNUM = 0  
	 var ncar = 0   #]
	State s0 initial {
		println("Starting Client.")
	}
	//Goto requestIn
	
	State requestIn {
		request parkmanagerservice -m clientRequest : clientRequest(in)
	}
	Transition t0 whenTime 5000 -> end
				  whenReply enter -> handleSlotnum
		
	State handleSlotnum {
		onMsg( enter : enter(SLOTNUM)) {
			[# SLOTNUM = payloadArg(0).toInt() #]
		} 
	}
	Goto end if [# SLOTNUM==0 #] else moveIndoor
	
	State moveIndoor {
		request parkmanagerservice -m carenter : carenter($SLOTNUM)	
	}
	Transition t1 whenReply receipt -> handleTokenid
	
	State handleTokenid {
		printCurrentMessage
		onMsg( receipt : receipt(TOKENID)) {
			[# TOKENID = "${payloadArg(0)}" #]
		}
	}
	Transition out whenTime 6000 -> requestOut
	
	State requestOut {
		forward parkmanagerservice -m outTokenid : outTokenid($TOKENID) 
	}
	Transition t2 whenTime 100 -> retry
	//Goto end
	
	State retry {
		[# ncar = ncar+1 #]
	} 
	Goto end if [# ncar == 10 #] else requestIn
	
	State end {
		println("Client finished")
	}
} 

QActor parkmanagerservice context ctxparkmanager {
	[# 
		var counter=0 
		var x = 0
		var y = 0
	#]
	State s0 initial {
		discardMsg Off
		solve( consult("parking.pl"))
		solve( dynamic("freeSlot/1") )
		solve(unoccupySlot(1))
		solve(unoccupySlot(2))
		solve(unoccupySlot(3))
		solve(unoccupySlot(4))
		solve(unoccupySlot(5))
		solve(unoccupySlot(6))
		qrun coap.actorQakWeightCoapObserver.activate( myself  )
		qrun coap.actorQakSonarCoapObserver.activate( myself  )
		println("Starting ParkManagerService.")
	}
	Goto accept
	
	State accept {
		println("ParkManagerServing accepting client requests...")	
	}
	Transition clientMsg whenRequest clientRequest -> handleClientRequest
						 whenRequest carenter -> handleCarEnter
						 whenMsg outTokenid and [# coap.actorQakSonarCoapObserver.readResponse()=="free" #] -> handleClientOut
	
	State handleClientRequest {
		println("ParkManagerService handling client request")
		onMsg( clientRequest : clientRequest(X)) {
			[# val requestType = "${payloadArg(0)}" #]
			if [# requestType == "in" #] {
				
				if [# coap.actorQakWeightCoapObserver.readResponse()=="free" #] {
				
					solve( getFreeSlot( S ) )
					[# val SLOTNUM = getCurSol("S") #]
					updateResource [# "enter("+SLOTNUM+")" #]
					
					solve( occupySlot( $SLOTNUM ) ) // let's assume at the moment that the client is going to do carenter
				
					replyTo clientRequest with  enter :  enter( $SLOTNUM )	
				}
				else {
					replyTo clientRequest with  enter :  enter( 0 ) //at the moment the client is refused if the indoor area is occupied
				}
			}
		}
	}
	Goto accept
	
	State handleCarEnter {
		printCurrentMessage
		onMsg(carenter : carenter(SLOTNUM)) {
			[# val SLOTNUM = payloadArg(0).toInt() #]
			
			solve( indoor(X,Y) )
			[# x = getCurSol("X").toString().toInt() #]
			[# y = getCurSol("Y").toString().toInt() #]
			
			//forward transporttrolley -m move : move($x,$y)
			[# forward("move", "move($x,$y)" ,"transporttrolley" ) #]
			
			
			solve( getCoordinates($SLOTNUM,X,Y) )
			[# x = getCurSol("X").toString().toInt() #]
			[# y = getCurSol("Y").toString().toInt() #]

			//forward transporttrolley -m move : move($x,$y)
			[# forward("move", "move($x,$y)" ,"transporttrolley" ) #]
					
			[# val TOKENID = "$SLOTNUM"+"$counter" #]
			[# counter++ #]
			
			
			updateResource [# "receipt("+TOKENID+")" #]
					
			replyTo carenter with  receipt :  receipt( $TOKENID )
		}
	}
	Transition t3 whenTime 1000 -> moveTrolleyHome
						 whenRequest clientRequest -> handleClientRequest
						 whenRequest carenter -> handleCarEnter
						 whenMsg outTokenid and [# coap.actorQakSonarCoapObserver.readResponse()=="free" #] -> handleClientOut
	
	State handleClientOut {
		println("ParkManagerServing out.")
		if [# coap.actorQakSonarCoapObserver.readResponse()=="free" #] {
			onMsg( outTokenid : outTokenid(X)) {
				[# val TOKENID = "${payloadArg(0)}" #]
				[# val SLOTNUM =  TOKENID.first() #]
					
				solve( getCoordinates($SLOTNUM,X,Y) )
				[# x = getCurSol("X").toString().toInt() #]
				[# y = getCurSol("Y").toString().toInt() #]
					
				//forward transporttrolley -m move : move($x,$y)
				[# forward("move", "move($x,$y)" ,"transporttrolley" ) #]
					
				solve( outdoor(X,Y) )
				[# x = getCurSol("X").toString().toInt() #]
				[# y = getCurSol("Y").toString().toInt() #]
					
				//forward transporttrolley -m move : move($x,$y)
				[# forward("move", "move($x,$y)" ,"transporttrolley" ) #]
					
				solve( unoccupySlot( $SLOTNUM ) ) 
			}
		}
	}
	Transition t4 whenTime 1000 -> moveTrolleyHome
				  whenRequest clientRequest -> handleClientRequest
				  whenRequest carenter -> handleCarEnter
				  whenMsg outTokenid and [# coap.actorQakSonarCoapObserver.readResponse()=="free" #] -> handleClientOut
				  
	State moveTrolleyHome {
		solve( home(X,Y) )
		[# x = getCurSol("X").toString().toInt() #]
		[# y = getCurSol("Y").toString().toInt() #]
		//forward transporttrolley -m move : move($x,$y)
		[# forward("move", "move($x,$y)" ,"transporttrolley" ) #]
	}
	Goto accept
	 
}


QActor weightsensor context ctxparkmanager {
	[#   
		var prevWeight=0f
		
		fun resourceInfo(weight: Float, preWeight: Float) : String {
			if (Math.abs(weight - prevWeight) > 10) {
				if (weight.toInt() == 0) {
					return "free"
				}
 			}
 			return "occupied"
 		}
	#]
	
	State s0 initial {
		println("Starting Weight sensor.")
		updateResource [# "free" #] //stato iniziale
	}
	Goto wait
	
	State wait {
		println("Weightsensor waiting for data...")
	}
	Transition data whenMsg weightData -> handleData
	
	State handleData {
		println("Weightsensor received data")
		onMsg(weightData : weightData(W)) {
			[# var weight = "${payloadArg(0)}" #]
			println("weight: $weight")
			updateResource [# resourceInfo(weight.toFloat(), prevWeight.toFloat()) #]
			[# prevWeight = weight.toFloat() #]
		}
	}
	Goto wait
	
}


QActor transporttrolley context ctxparkmanager {
	
	[#
		val mapname     = "parkingMap"  		 
		var Myself      = myself   
		var CurrentPlannedMove = "" 
		var x = ""
		var y = ""
		var DIST = ""
		var PREV = "176"
	#]
	
	State s0 initial {
		
		run itunibo.planner.plannerUtil.initAI()
		run itunibo.planner.plannerUtil.loadRoomMap("$mapname") 
		run itunibo.planner.plannerUtil.showMap( )   
     	run itunibo.planner.plannerUtil.showCurrentRobotState()
     	
     	//run pathexecutil.register( Myself )
	}
	Goto wait
	
	State wait {
		println("Waiting messages...")
	}
	Transition t0 whenMsg move -> handle
	
	State handle {
		onMsg(move : move(X,Y)) {
			[# 
				x = payloadArg(0)
				y = payloadArg(1)
			#]
			println("x: $x, y: $y")
			run itunibo.planner.plannerUtil.planForGoal(x,y)
		}
	}
	Goto execPlannedMoves     
    
	State execPlannedMoves{   
		delay 300
 		[#  CurrentPlannedMove = itunibo.planner.plannerUtil.getNextPlannedMove() #]
 		println("+++++++++++++++++++++++++++++++ $CurrentPlannedMove")
 	}
 	Goto doMove if [# CurrentPlannedMove.length>0 #] else parkthecar
 
 	State doMove{ 		
 	}
 	Goto wMove if [# CurrentPlannedMove == "w" #] else turnMove
 	
 	State wMove {     
 		request basicrobot -m step : step(175) //330
 	}
 	Transition t0 whenReply stepdone   -> stepDone
 				  whenReply stepfail   -> stepFailed 
  	
 	 State stepDone{  
 		//updateResource [# itunibo.planner.plannerUtil.getMap() #]
 		run itunibo.planner.plannerUtil.updateMap(  "w" )
 		run itunibo.planner.plannerUtil.showCurrentRobotState( )
 		//updateResource [# "stepDone" # ]
  	} 
 	Goto execPlannedMoves
 	
 	State turnMove{
 		println("-----qqqq-----------------dsaasds---------------sdaadssdasdassdadsd - -- -$CurrentPlannedMove")
  		if [# CurrentPlannedMove == "l" || CurrentPlannedMove == "r"  #]{
  			forward basicrobot -m cmd : cmd($CurrentPlannedMove)
  		} 
 	} 
 	Goto rotationDone

 	State rotationDone{
 		run itunibo.planner.plannerUtil.updateMap(  "$CurrentPlannedMove" )
 	} 
 	 Goto execPlannedMoves
 	
 	State parkthecar{
 		printCurrentMessage
 		run itunibo.planner.plannerUtil.showCurrentRobotState( )  
 		if [# ! itunibo.planner.plannerUtil.atPos(x.toInt(),y.toInt()) #]{
 			run itunibo.planner.plannerUtil.planForGoal(x,y)
 		}
 		else {
 			[# println(itunibo.planner.plannerUtil.get_curPos().toString()) #]
 			updateResource [# "pos" + itunibo.planner.plannerUtil.get_curPos().toString() #]
 		}
 	}
    Goto execPlannedMoves  if[# ! itunibo.planner.plannerUtil.atPos(x.toInt(),y.toInt()) #] else  wait
	
	State stepFailed{  //has found an obstacle (a wall)
		printCurrentMessage
		onMsg(stepfail : stepfail(DURATION,OBSTACLE)) {
			[# 
				DIST = payloadArg(0)
				//var DUR = payloadArg(0)
				//DIST = (PREV.toInt() - DUR.toInt()).toString()
				//PREV = DUR
			#]
			request basicrobot -m step : step( $DIST )
		}
 	}    
    Transition t1 whenReply stepdone   -> stepDone
 				  whenReply stepfail   -> stepFailed 
	
}

QActor sonarsensor context ctxparkmanager {
	
	[#   
		var prevDist=0f
		
		fun resourceInfo(dist: Float, preDist: Float) : String {
			if (Math.abs(dist - prevDist) > 3) {
				if (dist.toInt() == 0) {
					return "free"
				}
 			}
 			return "occupied"
 		}
	#]
	
	State s0 initial {
		println("Starting Sonar sensor.")
		updateResource [# "free" #] //stato iniziale
	}
	Goto wait
	
	State wait {
		println("Sonarsensor waiting for data...")
	}
	Transition data whenMsg sonarData -> handleData
	
	State handleData {
		println("Sonarsensor received data")
		onMsg(sonarData : sonarData(D)) {
			[# var dist = "${payloadArg(0)}" #]
			println("distance: $dist")
		
			updateResource [# resourceInfo(dist.toFloat(), prevDist.toFloat()) #]

			[# prevDist = dist.toFloat() #]
		}
	}
	Goto wait
	
}