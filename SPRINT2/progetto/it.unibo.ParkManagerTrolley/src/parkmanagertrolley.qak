System -msglog model

Request clientRequest : clientRequest(X) // X = in
Reply enter : enter(SLOTNUM) // SLOTNUM=0/1/2/3/4/5/6 

Request carenter : carenter(SLOTNUM) // SLOTNUM=1/2/3/4/5/6
Reply receipt : receipt(TOKENID)

Dispatch outTokenid : outTokenid(TOKENID)

Dispatch move : move(X,Y)
Dispatch moveok   : move( MOVESHORT )
Dispatch stop : stop(X) //X=start/stop
Dispatch start : start(X)  //Used to simplify transporttrolley

Dispatch cmd       : cmd(MOVE)
Request step       : step( TIME )	
Reply   stepdone   : stepdone(V)
Reply   stepfail   : stepfail(DURATION, CAUSE)

Context ctxparkmanager ip [host="localhost" port=8070]
Context ctxclient ip [host="192.168.0.68" port=8069]
Context ctxbasicrobot ip [host="127.0.0.1" port=8020]    

ExternalQActor basicrobot context ctxbasicrobot

QActor parkmanagerservice context ctxparkmanager {
	[# 
		var counter=0 
		var x = 0
		var y = 0
	#]
	State s0 initial {
		discardMsg Off
		solve( consult("parking.pl"))
		solve( dynamic("freeSlot/1") )
		solve(unoccupySlot(1))
		solve(unoccupySlot(2))
		solve(unoccupySlot(3))
		solve(unoccupySlot(4))
		solve(unoccupySlot(5))
		solve(unoccupySlot(6))
		
		qrun coap.actorQakStateCoapObserver.activate( myself )
		println("Starting ParkManagerService.")
	}
	Goto accept
	
	State accept {
		println("ParkManagerServing accepting client requests...")	
	}
	Transition clientMsg whenRequest clientRequest and [# coap.actorQakStateCoapObserver.readTrolley()!="stopped" #] -> handleClientRequest
						 whenRequest carenter and [# coap.actorQakStateCoapObserver.readTrolley()!="stopped" #] -> handleCarEnter
						 whenMsg outTokenid and [# coap.actorQakStateCoapObserver.readOutdoor()=="free" && coap.actorQakStateCoapObserver.readTrolley()!="stopped" #] -> handleClientOut
						 whenMsg stop -> stoptrolley
	
	State handleClientRequest {
		println("ParkManagerService handling client request")
		onMsg( clientRequest : clientRequest(X)) {
			[# val requestType = "${payloadArg(0)}" #]
			if [# requestType == "in" #] {
				
				if [# coap.actorQakStateCoapObserver.readWeight()=="free" #] {
				
					solve( getFreeSlot( S ) )
					[# val SLOTNUM = getCurSol("S") #]
					updateResource [# "enter("+SLOTNUM+")" #]
					
					solve( occupySlot( $SLOTNUM ) ) // let's assume at the moment that the client is going to do carenter
				
					replyTo clientRequest with  enter :  enter( $SLOTNUM )	
				}
				else {
					replyTo clientRequest with  enter :  enter( 0 ) //at the moment the client is refused if the indoor area is occupied
				}
			}
		}
	}
	Goto accept
	
	State handleCarEnter {
		printCurrentMessage
		onMsg(carenter : carenter(SLOTNUM)) {
			[# val SLOTNUM = payloadArg(0).toInt() #]
			
			solve( indoor(X,Y) )
			[# x = getCurSol("X").toString().toInt() #]
			[# y = getCurSol("Y").toString().toInt() #]
			
			//forward transporttrolley -m move : move($x,$y)
			[# forward("move", "move($x,$y)" ,"transporttrolley" ) #]
			
			
			solve( getCoordinates($SLOTNUM,X,Y) )
			[# x = getCurSol("X").toString().toInt() #]
			[# y = getCurSol("Y").toString().toInt() #]

			//forward transporttrolley -m move : move($x,$y)
			[# forward("move", "move($x,$y)" ,"transporttrolley" ) #]
					
			[# val TOKENID = "$SLOTNUM"+"$counter" #]
			[# counter++ #]
			
			
			updateResource [# "receipt("+TOKENID+")" #]
					
			replyTo carenter with  receipt :  receipt( $TOKENID )
		}
	}
	Transition t3 whenTime 1000 -> moveTrolleyHome
						 whenRequest clientRequest and [# coap.actorQakStateCoapObserver.readTrolley()!="stopped" #] -> handleClientRequest
						 whenRequest carenter and [# coap.actorQakStateCoapObserver.readTrolley()!="stopped" #] -> handleCarEnter
						 whenMsg outTokenid and [# coap.actorQakStateCoapObserver.readOutdoor()=="free"  && coap.actorQakStateCoapObserver.readTrolley()!="stopped" #] -> handleClientOut
						 whenMsg stop -> stoptrolley
	
	State handleClientOut {
		println("ParkManagerServing out.")
		if [# coap.actorQakStateCoapObserver.readResponse()=="free" #] {
			onMsg( outTokenid : outTokenid(X)) {
				[# val TOKENID = "${payloadArg(0)}" #]
				[# val SLOTNUM =  TOKENID.first() #]
					
				solve( getCoordinates($SLOTNUM,X,Y) )
				[# x = getCurSol("X").toString().toInt() #]
				[# y = getCurSol("Y").toString().toInt() #]
					
				//forward transporttrolley -m move : move($x,$y)
				[# forward("move", "move($x,$y)" ,"transporttrolley" ) #]
					
				solve( outdoor(X,Y) )
				[# x = getCurSol("X").toString().toInt() #]
				[# y = getCurSol("Y").toString().toInt() #]
					
				//forward transporttrolley -m move : move($x,$y)
				[# forward("move", "move($x,$y)" ,"transporttrolley" ) #]
					
				solve( unoccupySlot( $SLOTNUM ) ) 
			}
		}
	}
	Transition t4 whenTime 1000 -> moveTrolleyHome
				  whenRequest clientRequest and [# coap.actorQakStateCoapObserver.readTrolley()!="stopped" #] -> handleClientRequest
				  whenRequest carenter and [# coap.actorQakStateCoapObserver.readTrolley()!="stopped" #] -> handleCarEnter
				  whenMsg outTokenid and [# coap.actorQakStateCoapObserver.readOutdoor()=="free" && coap.actorQakStateCoapObserver.readTrolley()!="stopped" #] -> handleClientOut
				  whenMsg stop -> stoptrolley
				  
	State moveTrolleyHome {
		solve( home(X,Y) )
		[# x = getCurSol("X").toString().toInt() #]
		[# y = getCurSol("Y").toString().toInt() #]
		//forward transporttrolley -m move : move($x,$y)
		[# forward("move", "move($x,$y)" ,"transporttrolley" ) #]
	}
	Goto accept
	 
	State stoptrolley {
		onMsg( stop : stop(CMD)) {
			[# val CMD = "${payloadArg(0)}" #]
			//propaga il comando al trolley
			if [# CMD == "stop" #] {
				forward transporttrolley -m stop : stop($CMD)
			} else { 
				if [# CMD == "start" #] {
					forward transporttrolley -m start : start($CMD)
				}
			}
		}
	} Goto accept
}


QActor transporttrolley context ctxparkmanager {
	
	[#
		val mapname     = "parkingMap"  		 
		var Myself      = myself   
		var CurrentPlannedMove = "" 
		var x = ""
		var y = ""
		var DIST = ""
		var PREV = "176"
	#]
	
	State s0 initial {
		
		run itunibo.planner.plannerUtil.initAI()
		run itunibo.planner.plannerUtil.loadRoomMap("$mapname") 
		run itunibo.planner.plannerUtil.showMap( )   
     	run itunibo.planner.plannerUtil.showCurrentRobotState()
     	
	}
	Goto wait
	
	State wait {
		if [# itunibo.planner.plannerUtil.atHome() #] {
 			updateResource [# "idle" #]
 		} else {
 			updateResource [# "working" #]
 		}
		println("Waiting messages...")
	}
	Transition t0 whenMsg move -> handle
				  whenMsg stop -> stopped
	
	State handle {
		onMsg(move : move(X,Y)) {
			[# 
				x = payloadArg(0)
				y = payloadArg(1)
			#]
			println("x: $x, y: $y")
			
			updateResource [# "working" #]
			
			run itunibo.planner.plannerUtil.planForGoal(x,y)
		}
	}
	Goto execPlannedMoves  
	//Transition t0 whenTime 10 -> execPlannedMoves
	//			  whenMsg stop -> stopped   
    
	State execPlannedMoves{   
		delay 300
 		[#  CurrentPlannedMove = itunibo.planner.plannerUtil.getNextPlannedMove() #]
 		println("+++++++++++++++++++++++++++++++ $CurrentPlannedMove")
 	}
 	Goto doMove if [# CurrentPlannedMove.length>0 #] else parkthecar
 
 	State doMove{ 		
 	}
 	Goto wMove if [# CurrentPlannedMove == "w" #] else turnMove
 	
 	State wMove {     
 		request basicrobot -m step : step(175) //330
 	}
 	Transition t0 whenReply stepdone   -> stepDone
 				  whenReply stepfail   -> stepFailed 
  	
 	 State stepDone{  
 		//updateResource [# itunibo.planner.plannerUtil.getMap() #]
 		run itunibo.planner.plannerUtil.updateMap(  "w" )
 		run itunibo.planner.plannerUtil.showCurrentRobotState( )
  	} 
 	Goto execPlannedMoves
 	
 	State turnMove{
  		if [# CurrentPlannedMove == "l" || CurrentPlannedMove == "r"  #]{
  			forward basicrobot -m cmd : cmd($CurrentPlannedMove)
  		} 
 	} 
 	Goto rotationDone

 	State rotationDone{
 		run itunibo.planner.plannerUtil.updateMap(  "$CurrentPlannedMove" )
 	} 
 	 Goto execPlannedMoves
 	
 	State parkthecar{
 		printCurrentMessage
 		run itunibo.planner.plannerUtil.showCurrentRobotState( )  
 		if [# ! itunibo.planner.plannerUtil.atPos(x.toInt(),y.toInt()) #]{
 			run itunibo.planner.plannerUtil.planForGoal(x,y)
 		}
 		else {
 			[# println(itunibo.planner.plannerUtil.get_curPos().toString()) #]
 			if [# itunibo.planner.plannerUtil.atHome() #] {
 				updateResource [# "idle" #]
 			}
 			//updateResource [# "pos" + itunibo.planner.plannerUtil.get_curPos().toString() #]
 		}
 	}
    Goto execPlannedMoves  if[# ! itunibo.planner.plannerUtil.atPos(x.toInt(),y.toInt()) #] else  wait
	
	State stepFailed{  //has found an obstacle (a wall)
		printCurrentMessage
		onMsg(stepfail : stepfail(DURATION,OBSTACLE)) {
			[# 
				DIST = payloadArg(0) //sostituire con pathexecutil.waitUser("Reposition the robot",10000)
			#]
			request basicrobot -m step : step( $DIST )
		}
 	}    
    Transition t1 whenReply stepdone   -> stepDone
 				  whenReply stepfail   -> stepFailed 
 	
 	State stopped {
 		println("STOPPED !!!!!!!!!!!!!!!!!!!!!!! STOPPED !!!!!!!!!!!!!!!!!!!! STOPPED !!!!!!!!!!!!!!")
 		updateResource [# "stopped" #]
 	}
 	Transition t1 whenMsg start -> wait
	
}

QActor parkingstate context ctxparkmanager {
	[#
		var sonarobs = coap.actorQakResourceCoapObserver("sonarsensor")
		var weightobs = coap.actorQakResourceCoapObserver("weightsensor")
		var thermometerobs = coap.actorQakResourceCoapObserver("thermometer")
		var trolleyobs = coap.actorQakResourceCoapObserver("transporttrolley")
		var fanobs = coap.actorQakResourceCoapObserver("fan")
	#]
	
	State s0 initial {
		println("Starting Parkingstate.")
		updateResource [# "Empty" #] //stato iniziale
		qrun sonarobs.activate( myself)
		qrun weightobs.activate( myself)
		qrun thermometerobs.activate( myself)
		qrun trolleyobs.activate( myself)
		qrun fanobs.activate(myself)
	}
	Goto wait
	
	State wait {
		updateResource [# "sonar:" + sonarobs.readContent() + "weight:" + weightobs.readContent() + "thermometer:" + thermometerobs.readContent() + "trolley:" + trolleyobs.readContent() + "fan:" + fanobs.readContent()#]
	}
	Transition t0 whenTime 100 -> wait
	//Goto wait
}