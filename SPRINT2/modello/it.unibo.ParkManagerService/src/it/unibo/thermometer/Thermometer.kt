/* Generated by AN DISI Unibo */ 
package it.unibo.thermometer

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Thermometer ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "s0"
	}
	@kotlinx.coroutines.ObsoleteCoroutinesApi
	@kotlinx.coroutines.ExperimentalCoroutinesApi			
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		
				val TMAX=35
				var criticTemp = false // true if the previous temperature was > TMAX
				var temperature = 0
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						println("Starting Thermometer.")
						updateResourceRep( "0"  
						)
					}
					 transition( edgeName="goto",targetState="wait", cond=doswitch() )
				}	 
				state("wait") { //this:State
					action { //it:State
						println("Thermometer waiting for data...")
					}
					 transition(edgeName="data30",targetState="handleData",cond=whenDispatch("tempData"))
				}	 
				state("handleData") { //this:State
					action { //it:State
						println("Thermometer received data")
						if( checkMsgContent( Term.createTerm("tempData(T)"), Term.createTerm("tempData(T)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 temperature = "${payloadArg(0)}".toInt()  
								println("temperature: $temperature")
								updateResourceRep( "$temperature"  
								)
						}
					}
					 transition( edgeName="goto",targetState="abovetmax", cond=doswitchGuarded({ !criticTemp && temperature>=TMAX  
					}) )
					transition( edgeName="goto",targetState="checkbelowtemp", cond=doswitchGuarded({! ( !criticTemp && temperature>=TMAX  
					) }) )
				}	 
				state("abovetmax") { //this:State
					action { //it:State
						 criticTemp=true  
						emit("thermometerevent", "thermometerevent(above)" ) 
					}
					 transition(edgeName="data31",targetState="handleData",cond=whenDispatch("tempData"))
				}	 
				state("checkbelowtemp") { //this:State
					action { //it:State
					}
					 transition( edgeName="goto",targetState="belowmax", cond=doswitchGuarded({ criticTemp && temperature<TMAX 
					}) )
					transition( edgeName="goto",targetState="wait", cond=doswitchGuarded({! ( criticTemp && temperature<TMAX 
					) }) )
				}	 
				state("belowmax") { //this:State
					action { //it:State
						 criticTemp=false  
						emit("thermometerevent", "thermometerevent(below)" ) 
					}
					 transition(edgeName="data32",targetState="handleData",cond=whenDispatch("tempData"))
				}	 
			}
		}
}
