/* Generated by AN DISI Unibo */ 
package it.unibo.sonarsensor

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Sonarsensor ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "s0"
	}
	@kotlinx.coroutines.ObsoleteCoroutinesApi
	@kotlinx.coroutines.ExperimentalCoroutinesApi			
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		   
				var state="free"
				var prevDist=0f
				var DTFREE = 5000L
				var TIMER = 0L
				var prevState = "free"
				var StartTime = 0L
				var Duration = 0L
				
				fun resourceInfo(dist: Float, preDist: Float) : String {
					if (Math.abs(dist - prevDist) > 3) {
						if (dist.toInt() == 0) {
							return "free"
						}
		 			}
		 			return "occupied"
		 		}
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						println("Starting Sonar sensor.")
						updateResourceRep( "free"  
						)
					}
					 transition( edgeName="goto",targetState="wait", cond=doswitch() )
				}	 
				state("wait") { //this:State
					action { //it:State
						println("Sonarsensor waiting for data...")
					}
					 transition(edgeName="data27",targetState="handleData",cond=whenDispatch("sonarData"))
				}	 
				state("handleData") { //this:State
					action { //it:State
						println("Sonarsensor received data")
						if( checkMsgContent( Term.createTerm("sonarData(D)"), Term.createTerm("sonarData(D)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 var dist = "${payloadArg(0)}"  
								println("distance: $dist")
								 prevState = state  
								 state = resourceInfo(dist.toFloat(), prevDist.toFloat())  
								updateResourceRep( state  
								)
								 prevDist = dist.toFloat()  
						}
					}
					 transition( edgeName="goto",targetState="stateOccupied", cond=doswitchGuarded({ state=="occupied" 
					}) )
					transition( edgeName="goto",targetState="wait", cond=doswitchGuarded({! ( state=="occupied" 
					) }) )
				}	 
				state("stateOccupied") { //this:State
					action { //it:State
						if(  prevState=="free" && state=="occupied"  
						 ){StartTime = getCurrentTime()
						}
						else
						 {if(  prevState=="occupied" && state=="occupied" 
						  ){Duration = getDuration(StartTime)
						 }
						 }
						 TIMER = DTFREE - Duration  
						println("Duration $Duration TIMER $TIMER UIUIIIIIIIIIIIIUUUUUUUUUUUIIIIIIIIIIIIIUUUUUUUUUUUUUUUUUUUUUUUUIU")
						stateTimer = TimerActor("timer_stateOccupied", 
							scope, context!!, "local_tout_sonarsensor_stateOccupied", TIMER )
					}
					 transition(edgeName="t028",targetState="sendEvent",cond=whenTimeout("local_tout_sonarsensor_stateOccupied"))   
					transition(edgeName="t029",targetState="handleData",cond=whenDispatch("sonarData"))
				}	 
				state("sendEvent") { //this:State
					action { //it:State
						emit("sonarevent", "sonarevent(timeout)" ) 
					}
					 transition( edgeName="goto",targetState="wait", cond=doswitch() )
				}	 
			}
		}
}
