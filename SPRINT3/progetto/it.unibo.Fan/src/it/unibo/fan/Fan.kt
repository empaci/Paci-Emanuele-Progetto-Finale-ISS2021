/* Generated by AN DISI Unibo */ 
package it.unibo.fan

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Fan ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "s0"
	}
	@kotlinx.coroutines.ObsoleteCoroutinesApi
	@kotlinx.coroutines.ExperimentalCoroutinesApi			
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						println("Starting Fan.")
						updateResourceRep( "off"  
						)
					}
					 transition( edgeName="goto",targetState="wait", cond=doswitch() )
				}	 
				state("wait") { //this:State
					action { //it:State
						println("Fan waiting...")
					}
					 transition(edgeName="data0",targetState="handleEvent",cond=whenEvent("thermometerevent"))
				}	 
				state("handleEvent") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("thermometerevent(X)"), Term.createTerm("thermometerevent(X)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 var type = "${payloadArg(0)}"  
								if(  type == "above"  
								 ){updateResourceRep( "on"  
								)
								println("on")
								}
								else
								 {updateResourceRep( "off"  
								 )
								 println("off")
								 }
						}
					}
					 transition( edgeName="goto",targetState="wait", cond=doswitch() )
				}	 
			}
		}
}
