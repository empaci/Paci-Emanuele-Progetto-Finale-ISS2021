/* Generated by AN DISI Unibo */ 
package it.unibo.sonarlogic

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Sonarlogic ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "s0"
	}
	@kotlinx.coroutines.ObsoleteCoroutinesApi
	@kotlinx.coroutines.ExperimentalCoroutinesApi			
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		
				var STATUS="free"
				var DTFREE = 0L
				var TIMER = 0L
				var prevState = "free"
				var StartTime = 0L
				var DURATION = 0L
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						println("Starting Sonar logic.")
						solve("consult('sonarapplogic.pl')","") //set resVar	
						solve("dynamic('prevDist/1')","") //set resVar	
						solve("init(X)","") //set resVar	
						 val INITSTATUS = getCurSol("X").toString()  
						 prevState = INITSTATUS  
						forward("sonarstatusupdate", "sonarstatusupdate($INITSTATUS)" ,"sonarsensor" ) 
						solve("dtfree(X)","") //set resVar	
						 DTFREE = getCurSol("X").toString().toLong()  
					}
					 transition( edgeName="goto",targetState="wait", cond=doswitch() )
				}	 
				state("wait") { //this:State
					action { //it:State
					}
					 transition(edgeName="t03",targetState="applylogic",cond=whenEvent("local_sonarupdate"))
				}	 
				state("applylogic") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("local_sonarupdate(D)"), Term.createTerm("local_sonarupdate(D)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 val DISTANCE = "${payloadArg(0)}"  
								solve("modifyStatus($DISTANCE,RES)","") //set resVar	
								 val RESULT = getCurSol("RES").toString()  
								if(  RESULT=="true"  
								 ){solve("getStatus($DISTANCE,X)","") //set resVar	
								 
													prevState = STATUS
													STATUS = getCurSol("X").toString()
								forward("sonarstatusupdate", "sonarstatusupdate($STATUS)" ,"sonarsensor" ) 
								}
						}
					}
					 transition( edgeName="goto",targetState="stateOccupied", cond=doswitchGuarded({ STATUS=="occupied"  
					}) )
					transition( edgeName="goto",targetState="wait", cond=doswitchGuarded({! ( STATUS=="occupied"  
					) }) )
				}	 
				state("stateOccupied") { //this:State
					action { //it:State
						if(  prevState=="free" && STATUS=="occupied"  
						 ){StartTime = getCurrentTime()
						}
						DURATION = getDuration(StartTime)
						 TIMER = DTFREE - DURATION  
						if(  TIMER < 0  
						 ){ TIMER = 0  
						}
						println("StartTime $StartTime Duration $DURATION TIMER $TIMER")
						stateTimer = TimerActor("timer_stateOccupied", 
							scope, context!!, "local_tout_sonarlogic_stateOccupied", TIMER )
					}
					 transition(edgeName="t04",targetState="timeout",cond=whenTimeout("local_tout_sonarlogic_stateOccupied"))   
					transition(edgeName="t05",targetState="applylogic",cond=whenEvent("local_sonarupdate"))
				}	 
				state("timeout") { //this:State
					action { //it:State
						forward("sonarstatusupdate", "sonarstatusupdate(timeout)" ,"sonarsensor" ) 
					}
					 transition( edgeName="goto",targetState="wait", cond=doswitch() )
				}	 
			}
		}
}
