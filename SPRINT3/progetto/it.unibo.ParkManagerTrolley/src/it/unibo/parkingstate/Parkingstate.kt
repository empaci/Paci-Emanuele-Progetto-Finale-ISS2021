/* Generated by AN DISI Unibo */ 
package it.unibo.parkingstate

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Parkingstate ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "s0"
	}
	@kotlinx.coroutines.ObsoleteCoroutinesApi
	@kotlinx.coroutines.ExperimentalCoroutinesApi			
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		
				var sonarobs = coap.actorQakResourceCoapObserver("sonarsensor","8071","ctxsonarsensor")
				var weightobs = coap.actorQakResourceCoapObserver("weightsensor","8072","ctxweightsensor")
				var thermometerobs = coap.actorQakResourceCoapObserver("thermometer","8073","ctxthermometer")
				var trolleyobs = coap.actorQakResourceCoapObserver("transporttrolley","8070","ctxparkmanager")
				var fanobs = coap.actorQakResourceCoapObserver("fan","8074","ctxfan")
				
				var prevsonar = ""
				var prevweight = ""
				var prevthermometer = ""
				var prevtrolley = ""
				var prevfan = ""
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						println("Starting Parkingstate.")
						updateResourceRep( "Empty"  
						)
						sonarobs.activate(myself)
						weightobs.activate(myself)
						thermometerobs.activate(myself)
						trolleyobs.activate(myself)
						fanobs.activate(myself)
					}
					 transition( edgeName="goto",targetState="wait", cond=doswitch() )
				}	 
				state("wait") { //this:State
					action { //it:State
						if(  prevsonar != sonarobs.readContent() || prevweight !=  weightobs.readContent() || prevthermometer != thermometerobs.readContent() || prevtrolley != trolleyobs.readContent() || prevfan != fanobs.readContent()  
						 ){updateResourceRep( "sonar:" + sonarobs.readContent() + "weight:" + weightobs.readContent() + "thermometer:" + thermometerobs.readContent() + "trolley:" + trolleyobs.readContent() + "fan:" + fanobs.readContent() 
						)
						 
										prevsonar = sonarobs.readContent()
										prevweight =  weightobs.readContent()
										prevthermometer = thermometerobs.readContent()
										prevtrolley = trolleyobs.readContent()
										prevfan = fanobs.readContent()
						}
						stateTimer = TimerActor("timer_wait", 
							scope, context!!, "local_tout_parkingstate_wait", 300.toLong() )
					}
					 transition(edgeName="t027",targetState="wait",cond=whenTimeout("local_tout_parkingstate_wait"))   
				}	 
			}
		}
}
