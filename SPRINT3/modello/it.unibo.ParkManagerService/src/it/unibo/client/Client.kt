/* Generated by AN DISI Unibo */ 
package it.unibo.client

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Client ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "s0"
	}
	@kotlinx.coroutines.ObsoleteCoroutinesApi
	@kotlinx.coroutines.ExperimentalCoroutinesApi			
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		 var TOKENID = ""
			 var SLOTNUM = 0  
			 var ncar = 0    
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						println("Starting Client.")
						delay(2000) 
					}
				}	 
				state("requestIn") { //this:State
					action { //it:State
						request("clientRequest", "clientRequest(in)" ,"parkmanagerservice" )  
						stateTimer = TimerActor("timer_requestIn", 
							scope, context!!, "local_tout_client_requestIn", 5000.toLong() )
					}
					 transition(edgeName="t00",targetState="end",cond=whenTimeout("local_tout_client_requestIn"))   
					transition(edgeName="t01",targetState="handleSlotnum",cond=whenReply("enter"))
				}	 
				state("handleSlotnum") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("enter(SLOTNUM)"), Term.createTerm("enter(SLOTNUM)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 SLOTNUM = payloadArg(0).toInt()  
						}
					}
					 transition( edgeName="goto",targetState="end", cond=doswitchGuarded({ SLOTNUM==0  
					}) )
					transition( edgeName="goto",targetState="moveIndoor", cond=doswitchGuarded({! ( SLOTNUM==0  
					) }) )
				}	 
				state("moveIndoor") { //this:State
					action { //it:State
						request("carenter", "carenter($SLOTNUM)" ,"parkmanagerservice" )  
					}
					 transition(edgeName="t12",targetState="handleTokenid",cond=whenReply("receipt"))
				}	 
				state("handleTokenid") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						if( checkMsgContent( Term.createTerm("receipt(TOKENID)"), Term.createTerm("receipt(TOKENID)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 TOKENID = "${payloadArg(0)}"  
						}
						stateTimer = TimerActor("timer_handleTokenid", 
							scope, context!!, "local_tout_client_handleTokenid", 6000.toLong() )
					}
					 transition(edgeName="out3",targetState="requestOut",cond=whenTimeout("local_tout_client_handleTokenid"))   
				}	 
				state("requestOut") { //this:State
					action { //it:State
						forward("outTokenid", "outTokenid($TOKENID)" ,"parkmanagerservice" ) 
						stateTimer = TimerActor("timer_requestOut", 
							scope, context!!, "local_tout_client_requestOut", 100.toLong() )
					}
					 transition(edgeName="t24",targetState="retry",cond=whenTimeout("local_tout_client_requestOut"))   
				}	 
				state("retry") { //this:State
					action { //it:State
						 ncar = ncar+1  
					}
					 transition( edgeName="goto",targetState="end", cond=doswitchGuarded({ ncar == 10  
					}) )
					transition( edgeName="goto",targetState="requestIn", cond=doswitchGuarded({! ( ncar == 10  
					) }) )
				}	 
				state("end") { //this:State
					action { //it:State
						println("Client finished")
					}
				}	 
			}
		}
}
