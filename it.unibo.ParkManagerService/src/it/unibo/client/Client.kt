/* Generated by AN DISI Unibo */ 
package it.unibo.client

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Client ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "s0"
	}
	@kotlinx.coroutines.ObsoleteCoroutinesApi
	@kotlinx.coroutines.ExperimentalCoroutinesApi			
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		 var TOKEIND = ""  
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						println("Starting Client.")
					}
					 transition( edgeName="goto",targetState="requestIn", cond=doswitch() )
				}	 
				state("requestIn") { //this:State
					action { //it:State
						println("Client request to park.")
						request("clientRequest", "clientRequest(in)" ,"park_manager_service" )  
					}
					 transition(edgeName="slotnumReceived1",targetState="handleSlotnum",cond=whenReply("replySlotnum"))
				}	 
				state("handleSlotnum") { //this:State
					action { //it:State
						println("Client SLOTNUM received.")
					}
					 transition(edgeName="tokenidReceived2",targetState="handleTokenid",cond=whenDispatch("replyTokenid"))
				}	 
				state("handleTokenid") { //this:State
					action { //it:State
						println("Client TOKENID received.")
						if( checkMsgContent( Term.createTerm("replyTokenid(X)"), Term.createTerm("replyTokenid(X)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 TOKENID = "${payloadArg(0)}"  
						}
					}
					 transition( edgeName="goto",targetState="requestOut", cond=doswitch() )
				}	 
				state("requestOut") { //this:State
					action { //it:State
						println("Client request to exit sent.")
						forward("outTokenid", "outTokenid($TOKENID)" ,"park_manager_service" ) 
					}
				}	 
			}
		}
}
