/* Generated by AN DISI Unibo */ 
package it.unibo.park_manager_service

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Park_manager_service ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "s0"
	}
	@kotlinx.coroutines.ObsoleteCoroutinesApi
	@kotlinx.coroutines.ExperimentalCoroutinesApi			
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		 var counter=0  
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						discardMessages = false
						solve("consult('parking.pl')","") //set resVar	
						solve("dynamic('freeSlot/1')","") //set resVar	
						solve("unoccupySlot(1)","") //set resVar	
						println("Starting ParkManagerService.")
					}
					 transition( edgeName="goto",targetState="accept", cond=doswitch() )
				}	 
				state("accept") { //this:State
					action { //it:State
						println("ParkManagerServing accepting client requests...")
					}
					 transition(edgeName="clientMsg3",targetState="handleClientRequest",cond=whenRequest("clientRequest"))
					transition(edgeName="clientMsg4",targetState="handleCarEnter",cond=whenRequest("carenter"))
					transition(edgeName="clientMsg5",targetState="handleClientOut",cond=whenDispatch("outTokenid"))
				}	 
				state("handleClientRequest") { //this:State
					action { //it:State
						println("ParkManagerService handeling client request")
						if( checkMsgContent( Term.createTerm("clientRequest(X)"), Term.createTerm("clientRequest(X)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 val requestType = "${payloadArg(0)}"  
								if(  requestType == "in"  
								 ){println("ParkManagerServing Request to park received.")
								solve("getFreeSlot(S)","") //set resVar	
								 val SLOTNUM = getCurSol("S")  
								solve("occupySlot($SLOTNUM)","") //set resVar	
								answer("clientRequest", "enter", "enter($SLOTNUM)"   )  
								}
						}
					}
					 transition( edgeName="goto",targetState="accept", cond=doswitch() )
				}	 
				state("handleCarEnter") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						if( checkMsgContent( Term.createTerm("carenter(SLOTNUM)"), Term.createTerm("carenter(SLOTNUM)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 val SLOTNUM = payloadArg(0).toInt()  
								solve("getCoordinates($SLOTNUM,X,Y)","") //set resVar	
								 val x = getCurSol("X")  
								 val y = getCurSol("Y")  
								println("x: $x, y: $y")
								 val TOKENID = "$SLOTNUM,$counter"  
								 counter++  
								answer("carenter", "replyTokenid", "replyTokenid($TOKENID)"   )  
						}
					}
					 transition( edgeName="goto",targetState="accept", cond=doswitch() )
				}	 
				state("handleClientOut") { //this:State
					action { //it:State
						println("ParkManagerServing out.")
						if( checkMsgContent( Term.createTerm("outTokenid(TOKENID)"), Term.createTerm("outTokenid(X)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 val TOKENID = "${payloadArg(0)}"  
								 val SLOTNUM =  TOKENID.split(",")[0]  
								solve("outdoor(X,Y)","") //set resVar	
								 val x = getCurSol("X")  
								 val y = getCurSol("Y")  
								println("x: $x, y: $y")
								solve("unoccupySlot($SLOTNUM)","") //set resVar	
								println("$SLOTNUM")
						}
					}
					 transition( edgeName="goto",targetState="accept", cond=doswitch() )
				}	 
			}
		}
}
