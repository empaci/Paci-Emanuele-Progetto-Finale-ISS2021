/* Generated by AN DISI Unibo */ 
package it.unibo.park_manager_service

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Park_manager_service ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "s0"
	}
	@kotlinx.coroutines.ObsoleteCoroutinesApi
	@kotlinx.coroutines.ExperimentalCoroutinesApi			
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		 var counter=0  
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						discardMessages = false
						solve("consult('parking.pl')","") //set resVar	
						solve("dynamic('freeSlot/1')","") //set resVar	
						solve("unoccupySlot(1)","") //set resVar	
						println("Starting ParkManagerService.")
					}
					 transition( edgeName="goto",targetState="accept", cond=doswitch() )
				}	 
				state("accept") { //this:State
					action { //it:State
						println("ParkManagerServing accepting client requests...")
					}
					 transition(edgeName="clientIn0",targetState="handleClientRequest",cond=whenRequest("clientRequest"))
				}	 
				state("handleClientRequest") { //this:State
					action { //it:State
						println("ParkManagerService handeling client request")
					}
					 transition( edgeName="goto",targetState="accept", cond=doswitch() )
				}	 
			}
		}
}
